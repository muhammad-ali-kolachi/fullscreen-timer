{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pad","n","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleFullScreen","fullscreen","state","document","exitFullscreen","documentElement","requestFullscreen","setState","resetTimer","t","paused","switchMode","mode","pauseTimer","editing","toggleEditing","handleKeyDown","event","key","handleCursorMove","toLowerCase","replace","adjusting","showCursor","timer","_this2","setInterval","tick","window","addEventListener","clearInterval","removeEventListener","_this$state","prevState","direction","objectSpread","_this3","_this$state2","second","parseInt","minute","react_default","a","createElement","className","clsx","show-cursor","onDoubleClick","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6631920a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport clsx from 'clsx';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst pad = (n) => (n < 10)? `0${n}` : n;\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      t: 0,\r\n      paused: true,\r\n      mode: 'stopwatch',\r\n      fullscreen: false,\r\n      adjusting: false,\r\n      editing: null, // minute, second, null\r\n      showCursor: false,\r\n    }\r\n    this.timer = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.tick();\r\n    }, 500);\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  componentWillMount() {\r\n    clearInterval(this.timer);\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  tick() {\r\n    const { mode, paused, showCursor, editing } = this.state;\r\n    if (editing) {\r\n      this.setState({ showCursor: !showCursor });\r\n    }\r\n    if (paused) return;\r\n    this.setState((prevState) => {\r\n      const t = prevState.t + (mode === 'countdown' ? -1 : 1) * 0.5;\r\n      if (t <= 0) {\r\n        return {\r\n          t: 0,\r\n          paused: true,\r\n        }\r\n      } else {\r\n        return {\r\n          t,\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleFullScreen = () => {\r\n    const { fullscreen } = this.state;\r\n    if (!fullscreen) {\r\n      document.documentElement.requestFullscreen();\r\n    } else {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen(); \r\n      }\r\n    }\r\n    this.setState({ fullscreen: !fullscreen });\r\n  }\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      t: 0,\r\n      paused: true\r\n    });\r\n  }\r\n\r\n  switchMode = (mode) => {\r\n    this.setState({\r\n      mode: mode || (this.state.mode === 'stopwatch' ? 'countdown' : 'stopwatch'),\r\n    })\r\n  }\r\n\r\n  pauseTimer = () => {\r\n    this.setState({\r\n      paused: !this.state.paused,\r\n      editing: false,\r\n    })\r\n  }\r\n\r\n  toggleEditing = () => {\r\n    const { editing } = this.state;\r\n    this.setState({\r\n      editing: editing ? null : 'second',\r\n    });\r\n  }\r\n\r\n  handleCursorMove(direction) {\r\n    const state = { ...this.state };\r\n    state.paused = true;\r\n    switch (direction) {\r\n      case 'up':\r\n      case 'down':\r\n        if (!state.editing) {\r\n          state.editing = 'second';\r\n        }\r\n        state.t += (direction === 'up' ? 1 : -1) * (state.editing === 'second' ? 1 : 60);\r\n        if (state.t < 0) {\r\n          state.t = 0;\r\n        }\r\n        break;\r\n      case 'left':\r\n        state.editing = 'minute';\r\n        break;\r\n      case 'right':\r\n        state.editing = 'second';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState(state);\r\n  }\r\n\r\n  handleKeyDown = (event) => {\r\n    switch (event.key) {\r\n      case 'F':\r\n      case 'f':\r\n        this.toggleFullScreen();\r\n        break;\r\n      case 'R':\r\n      case 'r':\r\n        this.resetTimer();\r\n        break;\r\n      case 'S':\r\n      case 's':\r\n        this.switchMode();\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'ArrowDown':\r\n      case 'ArrowLeft':\r\n      case 'ArrowRight':\r\n        this.handleCursorMove(event.key.toLowerCase().replace('arrow', ''))\r\n        break;\r\n      case 'Enter':\r\n        this.toggleEditing();\r\n        break;\r\n      case ' ':\r\n        this.pauseTimer();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { t, paused, editing, mode, showCursor, fullscreen } = this.state;\r\n    const second = parseInt(t % 60);\r\n    const minute = parseInt((t - second) / 60);\r\n    return (\r\n      <div className=\"App\">\r\n        <div\r\n          className={clsx('clock', { 'show-cursor': showCursor })}\r\n          onDoubleClick={() => this.toggleFullScreen()}\r\n        >\r\n          <span className={clsx('time minute', { editing: editing === 'minute' })}>{pad(minute)}</span>\r\n          :\r\n          <span className={clsx('time second', { editing: editing === 'second' })}>{pad(second)}</span>\r\n        </div>\r\n        <ul className=\"tips\">\r\n          <li>\r\n            <button onClick={this.toggleFullScreen}>F</button>\r\n            -\r\n            <span className=\"tip\">{fullscreen ? 'exit': 'enter'} fullscreen</span>\r\n          </li>\r\n          <li>\r\n            <button onClick={() => this.handleCursorMove('left')}>←</button>\r\n            <button onClick={() => this.handleCursorMove('right')}>→</button>\r\n            <button onClick={() => this.handleCursorMove('up')}>↑</button>\r\n            <button onClick={() => this.handleCursorMove('down')}>↓</button>\r\n            -\r\n            <span className=\"tip\">edit timer</span>\r\n          </li>\r\n          <li>\r\n            <button onClick={this.resetTimer}>R</button>\r\n            -\r\n            <span className=\"tip\">reset timer</span>\r\n          </li>\r\n          <li>\r\n            <button onClick={this.switchMode}>S</button>\r\n            -\r\n            {mode === 'countdown' ?\r\n              <span className=\"tip\"><span>countdown ✓</span> or <button onClick={() => this.switchMode('stopwatch')}>stopwatch</button></span>\r\n              :\r\n              <span className=\"tip\"><button onClick={() => this.switchMode('countdown')}>countdown</button> or <span>stopwatch ✓</span></span>\r\n            }\r\n          </li>\r\n          <li>\r\n            <button onClick={this.pauseTimer}>Space</button>\r\n            -\r\n            <span className=\"tip\">{paused ? 'start' : 'pause'} timer</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}